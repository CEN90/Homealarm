// Sensor id
env int doorSensor_id = 1;
env int windowSensor_id = 2;

// User auth
env int user_key = 3;
env int user_code = 4;
env int allowed_attempts = 5;

// Delay times
env int user_time_before_code = 2;
env int user_time_entering_code = 3;

// Proper responses for user
env int IDLE = 0;
env int SCANKEY = 1;
env int OPENDOOR = 2;
env int BREAKWINDOW = 3;


reactiveclass Controller(10) {
    knownrebecs { 
        Sensor window_sensor, door_sensor; 
        MotionSensor motion;
        Authentication authentication;
        Door door;
        User user;
    }

    statevars {
        boolean armed;
        boolean door_open;
        boolean window_open;
        boolean alarm; 
        boolean door_locked;
    }
    
    Controller() {
        armed = false;
        door_open = false;
        window_open = false;
        alarm = false; 
        door_locked = false;
    }

    void setArmed() {
    	armed = true;
        door.setDoorlocked();
    }
    
    void setUnarmed() {
    	armed = false;
        door.setDoorUnlocked();
    }

    msgsrv turnOnAlarm() {
        alarm = true; 
        user.scenario(IDLE);
    }
    
    void turnOffAlarm() {
        alarm = false; 
    }

    msgsrv authenticatedUser() {
        armed = !armed;
        door.setDoorLockStatus(armed) after(5);
    }

    msgsrv updateDoorLock(boolean status) {
        door_locked = status;
    }

    msgsrv setSensorState(int sensor, boolean state){
        if (sensor == windowSensor_id) {
            window_open = state;
        }
        
        if (sensor == doorSensor_id) {
            door_open = state; 
        }

        //panic!!!!!!!!!!!! *kermit flapping with his arms*
        if (armed && (window_open || door_open)) {
            self.turnOnAlarm();
        }
    }

    msgsrv motionsensorTriggered() {
        if (armed) {
            self.turnOnAlarm();
        }
    }
}

reactiveclass Sensor(5) {
    knownrebecs { 
        Controller controller; 
    }

    statevars { 
        boolean isOpen; 
        int sensor_id;     
    }

    Sensor(int id){
        sensor_id = id; 
        isOpen = false; 
    }

    msgsrv opened() {
        isOpen = true;
        controller.setSensorState(sensor_id, true);
    }

    msgsrv closed() {
        isOpen = false;
        controller.setSensorState(sensor_id, false);
    }
}

reactiveclass MotionSensor(5) {
    knownrebecs { 
        Controller controller; 
    }

    statevars { 
        boolean isTriggered; 
    }

    msgsrv setTriggered() {
        isTriggered = true;
        controller.motionsensorTriggered();
    }

    msgsrv reset() {
        isTriggered = false;
    }
}

reactiveclass Authentication(10) {
    knownrebecs{
        Controller controller;
        User idiot;
    }

    statevars {
        boolean auth_key;
        int valid_key;
        int valid_code;
        int attempts;
    }

    Authentication(int key, int code) {
        valid_key = key;
        valid_code = code; 
     	attempts = 0;   
       	auth_key = false;
    }

    msgsrv checkKey(int key) {
		attempts += 1;

        if (key == valid_key && attempts < allowed_attempts) {
            auth_key = true; 
        } else {
            auth_key = false;
        }
        
        idiot.keyChecked(auth_key);
    }

    msgsrv authUserFromController() {
        auth_key = false;
        attempts = 0;   
        idiot.codeChecked() after(5);
    }

    msgsrv checkCode(int code) {   
        if (auth_key && code == valid_code) {
	        controller.authenticatedUser();	   
        }
    }
}

reactiveclass Door(5) {
    knownrebecs {
        Sensor d_sensor;
        User idiot;
    }

    statevars {
        boolean isLocked;
        boolean isOpen;
    }

    Door() {
        isLocked = false;
        isOpen = false;
    }

    msgsrv setDoorOpen() {
        if (!isLocked && !isOpen) {
            isOpen = true;
            d_sensor.opened() after(5);
            idiot.doorOpened() after(5);
        }
    }

    msgsrv setDoorClosed() {
        if (isOpen) {
            isOpen = false;
            d_sensor.closed() after(5);
            idiot.doorClosed() after(5);
        }
    }

    msgsrv setDoorlocked () {
        if (!isOpen) {
            delay(5);
            isLocked = true;
        }
    }

    msgsrv setDoorLockStatus(boolean status) {
        isLocked = status;
        idiot.scenario(BREAKWINDOW);
    }
    
    msgsrv setDoorUnlocked() {
        delay(5);
        isLocked = false;
    }
}

reactiveclass User(5) {
    knownrebecs { 
        Sensor window_sensor, door_sensor;
        MotionSensor motion_sensor; 
        Authentication authentication;
        Door door;
    }
    statevars {
        int _key, _code;
        int attempts;
    }

    User(int key, int code) {
        _key = key;
        _code = code;
        attempts = 0;

        self.scenario(SCANKEY);
    }
    
    msgsrv idle() {
    	self.idle() after(5);
    }

    msgsrv codeChecked() {
        door.setDoorOpen();
    }

    msgsrv doorOpened() {
        door.setDoorClosed() after(5);
    }

    msgsrv doorClosed() {
        door.setDoorOpen() after(5);
    }
    
    // If attacked should probably be something here
    msgsrv keyChecked(boolean valid) {
        if (valid) {
            authentication.checkCode(user_code) after(5);    	
        } else {
            authentication.checkKey(user_key) after(5);
        }
    }

    msgsrv scenario(int mode_selector) {
        if (mode_selector == IDLE) {
            self.idle();
        }

        if (mode_selector == SCANKEY) {
            self.keyChecked(false) after(5);
        }

        if (mode_selector == OPENDOOR) {
            door.setDoorOpen() after(5);	
        }

        if (mode_selector == BREAKWINDOW) {
            self.breakWindow() after(5);	
        }
    }
    
    msgsrv breakWindow() {
        window_sensor.opened();
    }

    msgsrv breakDoor() {
        door_sensor.opened();
    }   

    msgsrv breakDances() {
        motion_sensor.setTriggered();
    } 

    msgsrv pokesLock() {
        authentication.checkKey(user_key);
        delay(user_time_before_code);
        authentication.checkCode(user_code);
    }
}

main {
    Controller controller(w_sensor, d_sensor, m_sensor, authentication, door, user):();
    Sensor w_sensor(controller):(windowSensor_id);
    Sensor d_sensor(controller):(doorSensor_id);
    MotionSensor m_sensor(controller):();
    Authentication authentication(controller, user):(user_key, user_code);
    Door door(d_sensor, user): ();

    User user(w_sensor, d_sensor, m_sensor, authentication, door):(user_key, user_code);
}