env int doorSensor_id = 1;
env int windowSensor_id = 2;

env int user_key = 3;
env int user_code = 4;
env int allowed_attempts = 5;

env int user_time_before_code = 2;
env int user_time_entering_code = 3;

reactiveclass Controller(10) {
    knownrebecs { 
        Sensor window_sensor, door_sensor; 
        MotionSensor motion;
        Authentication authentication;
    }

    statevars {
        boolean armed;
        boolean door_open;
        boolean window_open;
        boolean alarm; 
        boolean motion_triggered; 
        boolean door_locked;
    }
    
    Controller() {
        self.reset();
    	// armed = false;
        // door_open = false;
        // window_open = false;
        // alarm = false; 
        // motion_triggered = false;
        // door_locked = false;

    }

    msgsrv authenticatedUser() {
        if (!armed) {
            if (door_open || window_open){
                //notify error, you work now, faster
            }
            
            armed = true;
            door_locked = true;
        
        } else {
            armed = false;
        }
    }

    msgsrv setSensorState(int sensor, boolean state){
        if (sensor == windowSensor_id) {
            window_open = state;
        }
        
        if (sensor == doorSensor_id) {
            door_open = state; 
        }
        
        //panic!!!!!!!!!!!! *imagine kermit flapping with his arms
    }

    msgsrv detectMotion() {
        if (armed) {
            self.turnOnAlarm();
            motion_triggered = true; 
        }
    }
    
    msgsrv turnOnAlarm() {
        alarm = true; 
    }
    
    msgsrv turnOffAlarm() {
        self.reset();
    }

    msgsrv reset() {
        armed = false;
        door_open = false;
        window_open = false;
        alarm = false; 
        motion_triggered = false; 
        door_locked = false;
    }
    
}

reactiveclass Sensor(5) {
    knownrebecs { 
        Controller controller; 
    }

    statevars { 
        boolean isOpen; 
        int sensor_id;     
    }

    Sensor(int id){
        sensor_id = id; 
        isOpen = false; 
    }

    msgsrv opened() {
        isOpen = true;
        self.notifyController();
    }

    msgsrv closed() {
        isOpen = false;
        self.notifyController();
    }

    msgsrv notifyController() {
        controller.setSensorState(sensor_id, isOpen);
    }

    msgsrv reset() {
        isOpen = false;
    }
}

reactiveclass MotionSensor(5) {
    knownrebecs { 
        Controller controller; 
    }

    statevars { 
        boolean isTriggered; 
    }

    msgsrv setTriggered() {
        isTriggered = true;
        controller.detectMotion();
    }

    msgsrv reset() {
        isTriggered = false;
    }
}

reactiveclass Authentication(5) {
    knownrebecs{
        Controller controller;
    }

    statevars {
        boolean auth_key;
        int valid_key;
        int valid_code;
        int attempts;
    }

    Authentication(int key, int code) {
        valid_key = key;
        valid_code = code; 
     	attempts = 0;   
       	auth_key = false;
    }

    msgsrv checkKey(int key) {
        if (key == valid_key) {
            auth_key = true; 
        } else {
            auth_key = false;
        }
    }

    msgsrv checkCode(int code) {
        if (auth_key) {
            self.authenticate(code);
        }

        auth_key = false;
    }

    msgsrv authenticate(int code) {
        attempts += 1;

        if (attempts > allowed_attempts) {
            auth_key = false;
        }

        if (auth_key) {
            if (code == valid_code) {
                controller.authenticatedUser();
                auth_key = false;
                attempts = 0;
            } 
        }
    }
}

reactiveclass User(5) {
    knownrebecs { 
        Sensor window_sensor, door_sensor;
        MotionSensor motion_sensor; 
        Authentication authentication;
    }
    statevars {
        boolean door_locked;
        int _key, _code;
    }

    User(int key, int code) {
        door_locked = false;
        _key = key;
        _code = code;
    }

    msgsrv scenario() {
        self.pokesLock();
    }

    msgsrv breakWindow() {
        window_sensor.opened();
    }

    msgsrv breakDoor() {
        door_sensor.opened();
    }   

    msgsrv breakDances() {
        motion_sensor.setTriggered();
    } 

    msgsrv pokesLock() {
        // scanna bricka
        // skriv in kod

        authentication.checkKey(user_key);
        authentication.checkCode(user_code) after(user_time_before_code);
        door_locked = !door_locked;
    }


}

main {
    Controller controller(w_sensor, d_sensor, m_sensor, authentication):();
    Sensor w_sensor(controller):(windowSensor_id);
    Sensor d_sensor(controller):(doorSensor_id);
    MotionSensor m_sensor(controller):();
    Authentication authentication(controller):(user_key, user_code);

    User user(w_sensor, d_sensor, m_sensor, authentication):(user_key, user_code);
}