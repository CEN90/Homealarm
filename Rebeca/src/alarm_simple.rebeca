env int doorSensor_id = 1; 
env int user_key = 2;
env int user_door = 3; 

env int DOOR_DELAY = 5;
env int USER_DELAY = 10;
env int AUTH_DELAY = 10;
env int BREAKIN_DELAY = 200;

reactiveclass Controller(10) {
    knownrebecs {
        Authentication auth;
        Door door;
    }
    statevars {
        boolean armed; 
        boolean alarm; 
        boolean door_locked;
        boolean door_open;
    }

    Controller() {
        armed = false;
        alarm = false;
        door_locked = false; 
        door_open = false;
    }

    msgsrv authenticatedUser() {
        armed = !armed;    

        if (alarm) {
            alarm = false;
        }  

        if (armed) {
            door.lockDoor();
        } else {
            door.unlockDoor();
        }
    }

    msgsrv setDoorStatus(boolean open, boolean locked) {
        door_open = open;
        door_locked = locked;

        if (armed && door_open) {
            self.alarma();
        }
    }

    msgsrv alarma() {
        alarm = true;
    }
}

reactiveclass Door(5) {
    knownrebecs {
        Controller controller;
    }
    
    statevars {
        boolean isLocked;
        boolean isOpen;
    }

    Door() {
        isOpen = false; 
        isLocked = false; 
    }

    msgsrv openDoor() {
        if (!isLocked && !isOpen){
            isOpen = true; 
            controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
        }
    }

    msgsrv closeDoor() {
        if (!isOpen) {
            isLocked = true;
            controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
        }
    }

    msgsrv lockDoor() {
        if (!isOpen){
            isLocked = true;
            controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
        }
    }

    msgsrv unlockDoor() {
        isLocked = false; 
        controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
    }

    msgsrv breakDoor() {
        isOpen = true;
        isLocked = false;
        controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
    }
}

reactiveclass BadActor(5) {
    knownrebecs {
        Door door;
    }

    statevars { }

    BadActor() {
        self.breakin() after(BREAKIN_DELAY);
    }

    msgsrv breakin() {
        door.breakDoor();
        self.breakin() after(BREAKIN_DELAY);
    }
}

reactiveclass Authentication(5) {
    knownrebecs {
        Controller controller;
        User user;
    }

    statevars {
        boolean auth_key;
        int valid_key;
        int valid_code;
        int attempts; 
    }

    Authentication(int key, int code) {
        auth_key = false; 
        valid_key = key;
        valid_code = code;  
        attempts = 0;
    }

    msgsrv checkKey(int key) {
        if(key == valid_key) {
            auth_key = true;
        } else {
            auth_key = false; 
        }

        user.keyChecked(auth_key) after(AUTH_DELAY);
    }

    msgsrv checkCode(int code) {
        boolean valid = false;

        if(auth_key && code == valid_code) {
            controller.authenticatedUser();
            valid = true;
        }

        auth_key = false;
        user.codeChecked(valid) after(AUTH_DELAY);
    }
}

reactiveclass User(5) {
    knownrebecs {
        Authentication auth;
        Door door;
    }

    statevars {
        int key, code;
        boolean authenticated;
    }

    User(int k, int c) {
        key = k;
        code = c;

        // self.loop() after(USER_DELAY);
        self.enterKey() after(USER_DELAY); // works
        // self.openDoor() after(USER_DELAY * 2);
    }

    msgsrv enterKey() {
        auth.checkKey(key) after(USER_DELAY);
    }

    msgsrv keyChecked(boolean valid) {
        if (valid) {
            auth.checkCode(code) after(USER_DELAY);
        } else {
            self.enterKey();
        }
    }

    msgsrv codeChecked(boolean valid) {
        if (valid) {
            authenticated = !authenticated;
        }

        // self.openDoor() after(USER_DELAY);
    }

    msgsrv openDoor() {
        if (authenticated) {
            door.openDoor() after(USER_DELAY);
        }

        self.closeDoor() after(USER_DELAY);
    }

    msgsrv closeDoor() {
        if (authenticated) {
            door.closeDoor() after(USER_DELAY);
        }
    }


    msgsrv loop() {
        // send open door
        // send close door
        // send auth
        // goto top

        // send open door
        door.openDoor();
        // delay(USER_DELAY);
        
        // send close door
        door.closeDoor();
        // delay(USER_DELAY);

        self.enterKey();
        // delay(USER_DELAY);

        self.loop() after(USER_DELAY * 10);
    }




}

main {
    Authentication authentication(controller, user):(user_key, user_door);
    User user(authentication, door): (user_key, user_door);
    Controller controller(authentication, door):();
    BadActor steven_seagal(door): ();
    Door door(controller):();
}