env int doorSensor_id = 1; 
env int user_key = 2;
env int user_door = 3; 

env int DOOR_DELAY = 5;
env int USER_DELAY = 10;
env int AUTH_DELAY = 10;
env int BREAKIN_DELAY = 30;

reactiveclass Controller(10) {
    knownrebecs {
        //Authentication auth;
        Door door;
        User user;
    }
    statevars {
        boolean armed; 
        boolean alarm; 
        boolean door_locked;
        boolean door_open;

        //authentication variables 
        boolean  auth_key;
        int valid_key; 
        int valid_code;
        int attemps; 
    }

    Controller(int key, int code) {
        armed = false;
        alarm = false;
        door_locked = false; 
        door_open = false;

        auth_key = false;
        valid_key = key;
        valid_code = code; 
        attemps = 0;
    }

    msgsrv checkKey(int key) {
        if(key == valid_key) {
            auth_key = true; 
        } else {
            auth_key = false; 
        }
        user.keyChecked(auth_key) after(AUTH_DELAY);
    }

    msgsrv checkCode(int code) {
        boolean valid = false; 

        if(auth_key && code == valid_code) {
            self.lockedUser();
            valid = true; 
        }

        auth_key = false;
        user.codeChecked(valid) after(AUTH_DELAY);
    }

    msgsrv lockedUser() {
        armed = !armed;    

        if (alarm) {
            alarm = false;
        }  

        if (armed) {
            door.lockDoor();
        } else {
            door.unlockDoor();
        }
    }

    msgsrv setDoorStatus(boolean open, boolean locked) {
        door_open = open;
        door_locked = locked;

        if (armed && door_open) {
            self.alarma();
        }
    }

    msgsrv alarma() {
        alarm = true;
    }
}

// reactiveclass Authentication(5) {
//     knownrebecs {
//         Controller controller;
//         User user;
//     }

//     statevars {
//         boolean auth_key;
//         int valid_key;
//         int valid_code;
//         int attempts; 
//     }

//     Authentication(int key, int code) {
//         auth_key = false; 
//         valid_key = key;
//         valid_code = code;  
//         attempts = 0;
//     }

//     msgsrv checkKey(int key) {
//         if(key == valid_key) {
//             auth_key = true;
//         } else {
//             auth_key = false; 
//         }

//         user.keyChecked(auth_key) after(AUTH_DELAY);
//     }

//     msgsrv checkCode(int code) {
//         boolean valid = false;

//         if(auth_key && code == valid_code) {
//             controller.lockedUser();
//             valid = true;
//         }

//         auth_key = false;
//         user.codeChecked(valid) after(AUTH_DELAY);
//     }
// }

reactiveclass Door(5) {
    knownrebecs {
        Controller controller;
    }
    
    statevars {
        boolean isLocked;
        boolean isOpen;
    }

    Door() {
        isOpen = false; 
        isLocked = false; 
    }

    msgsrv openDoor() {
        if (!isLocked && !isOpen){
            isOpen = true; 
            controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
        }
    }

    msgsrv closeDoor() {
        if (!isOpen) {
            isLocked = true;
            controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
        }
    }

    msgsrv lockDoor() {
        if (!isOpen){
            isLocked = true;
            controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
        }
    }

    msgsrv unlockDoor() {
        isLocked = false; 
        controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
    }

    msgsrv breakDoor() {
        isOpen = true;
        isLocked = false;
        controller.setDoorStatus(isOpen, isLocked) after(DOOR_DELAY);
    }

    msgsrv getLockStatus() {
        ((User)sender).setStatus(isLocked);
    }

    msgsrv spiedOn() {
        ((BadActor)sender).spyingDoor(isLocked);
    }
}

reactiveclass BadActor(5) {
    knownrebecs {
        Door door;
    }

    statevars { }

    BadActor() {
        self.spyingDoor(false) after(BREAKIN_DELAY);
    }

    msgsrv spyingDoor(boolean locked) {
        if (locked) {
            door.breakDoor();
        } else {
            door.spiedOn() after(BREAKIN_DELAY);
        }
    }
}

reactiveclass User(5) {
    knownrebecs {
        //Authentication auth;
        Controller controller; 
        Door door;
    }

    statevars {
        int key, code;
        boolean locked;
    }

    User(int k, int c) {
        key = k;
        code = c;
        locked = false;

        // self.loop() after(USER_DELAY);
        self.enterKey() after(USER_DELAY); // works 
    }

    msgsrv enterKey() {
        controller.checkKey(key) after(USER_DELAY);
    }

    msgsrv keyChecked(boolean valid) {
        if (valid) {
            controller.checkCode(code) after(USER_DELAY);
        } else {
            self.enterKey();
        }
    }

    msgsrv codeChecked(boolean valid) {
        if (valid) {
            door.getLockStatus();
        }

        if (locked) {
            self.openDoor() after(USER_DELAY * 2);
        } else {
            self.enterKey() after(USER_DELAY * 2);
        }
    }

    msgsrv setStatus(boolean status) {
        locked = status;
    }

    msgsrv openDoor() {
        door.openDoor();
        self.closeDoor() after(USER_DELAY * 2);
    }

    msgsrv closeDoor() {
        door.closeDoor();
        self.enterKey() after(USER_DELAY * 5);
    }


    // msgsrv loop() {
    //     // send open door
    //     door.openDoor();
    //     delay(USER_DELAY * 10);
        
    //     // send close door
    //     door.closeDoor();
    //     delay(USER_DELAY);

    //     self.enterKey();
    //     delay(USER_DELAY);

    //     self.loop() after(USER_DELAY * 10);
    // }
}

main {
    //Authentication authentication(controller, user):(user_key, user_door);
    Controller controller(door, user):(user_key, user_door);
    User user(controller, door): (user_key, user_door);
    BadActor intruder(door): ();
    Door door(controller):();
}