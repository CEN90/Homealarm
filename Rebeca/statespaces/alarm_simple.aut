des (0, 778, 724)
(0,"user.start[].[]",1)
(0,"user.start[].[]",2)
(0,"intruder.maeby[].[]",3)
(0,"intruder.maeby[].[]",4)
(1,"user.enterkey[].[]",5)
(1,"intruder.maeby[].[]",6)
(1,"intruder.maeby[].[]",7)
(2,"user.opendoor[].[]",18)
(2,"intruder.maeby[].[]",8)
(2,"intruder.maeby[].[]",9)
(3,"user.start[].[]",6)
(3,"user.start[].[]",8)
(4,"user.start[].[]",7)
(4,"user.start[].[]",9)
(5,"intruder.maeby[].[]",19)
(5,"intruder.maeby[].[]",10)
(6,"user.enterkey[].[]",19)
(7,"user.enterkey[].[]",10)
(8,"user.opendoor[].[]",12)
(9,"user.opendoor[].[]",13)
(10,"time +=15",11)
(11,"controller.checkkey[2].[]",32)
(12,"door.opendoor[].[]",14)
(13,"door.opendoor[].[]",16)
(14,"time +=2",15)
(15,"controller.setdoorstatus[true, false].[]",22)
(16,"time +=2",17)
(17,"controller.setdoorstatus[true, false].[]",24)
(18,"intruder.maeby[].[]",12)
(18,"intruder.maeby[].[]",13)
(18,"door.opendoor[].[_true]",21)
(19,"time +=15",20)
(20,"controller.checkkey[2].[]",33)
(21,"intruder.maeby[].[]",14)
(21,"intruder.maeby[].[]",16)
(22,"time +=8",23)
(23,"user.closedoor[].[]",26)
(24,"time +=8",25)
(25,"user.closedoor[].[]",27)
(26,"door.closedoor[].[]",28)
(27,"door.closedoor[].[]",30)
(28,"time +=10",29)
(29,"user.start[].[]",42)
(29,"user.start[].[]",43)
(29,"intruder.spyingdoor[false].[]",44)
(30,"time +=10",31)
(31,"user.start[].[]",45)
(31,"user.start[].[]",46)
(32,"controller.setkeyvalid[].[]",34)
(33,"controller.setkeyvalid[].[]",36)
(34,"time +=1",35)
(35,"user.keychecked[true].[]",38)
(36,"time +=1",37)
(37,"user.keychecked[true].[]",40)
(38,"time +=9",39)
(39,"controller.tau=>setkeyvalid.[]",63)
(40,"time +=4",41)
(41,"intruder.spyingdoor[false].[]",56)
(42,"user.enterkey[].[]",62)
(42,"intruder.spyingdoor[false].[]",47)
(43,"user.opendoor[].[]",58)
(43,"intruder.spyingdoor[false].[]",48)
(44,"user.start[].[]",47)
(44,"user.start[].[]",48)
(45,"user.enterkey[].[]",49)
(46,"user.opendoor[].[]",51)
(47,"user.enterkey[].[]",52)
(48,"user.opendoor[].[]",54)
(49,"time +=15",50)
(50,"controller.checkkey[2].[]",95)
(51,"door.opendoor[].[]",55)
(52,"time +=15",53)
(53,"controller.checkkey[2].[]",94)
(54,"door.opendoor[].[]",59)
(55,"time +=10",713)
(56,"time +=5",57)
(57,"controller.tau=>setkeyvalid.[]",64)
(58,"intruder.spyingdoor[false].[]",54)
(58,"door.opendoor[].[]",61)
(59,"time +=10",60)
(60,"user.closedoor[].[]",91)
(61,"intruder.spyingdoor[false].[]",59)
(62,"intruder.spyingdoor[false].[]",52)
(63,"controller.setkeyinvalid[].[]",65)
(64,"controller.setkeyinvalid[].[]",67)
(65,"time +=1",66)
(66,"controller.checkcode[3].[]",69)
(67,"time +=1",68)
(68,"controller.checkcode[3].[]",70)
(69,"controller.lockeduser[].[]",71)
(70,"controller.lockeduser[].[]",72)
(71,"controller.setarmed[].[]",73)
(72,"controller.setarmed[].[]",74)
(73,"door.lockdoor[].[]",75)
(74,"door.lockdoor[].[]",77)
(75,"time +=1",76)
(76,"user.codechecked[true].[]",79)
(77,"time +=1",78)
(78,"user.codechecked[true].[]",80)
(79,"door.getlockstatus[].[]",81)
(80,"door.getlockstatus[].[]",82)
(81,"user.setstatus[true].[]",83)
(82,"user.setstatus[true].[]",85)
(83,"time +=1",84)
(84,"controller.setdoorstatus[false, true].[]",87)
(85,"time +=1",86)
(86,"controller.setdoorstatus[false, true].[]",89)
(87,"time +=9",88)
(88,"user.enterkey[].[]",106)
(89,"time +=9",90)
(90,"user.enterkey[].[]",104)
(91,"door.closedoor[].[]",92)
(92,"time +=10",93)
(93,"user.start[].[]",110)
(93,"user.start[].[]",111)
(93,"door.spiedon[].[]",112)
(94,"controller.setkeyvalid[].[]",96)
(95,"controller.setkeyvalid[].[]",98)
(96,"time +=1",97)
(97,"user.keychecked[true].[]",100)
(98,"time +=1",99)
(99,"user.keychecked[true].[]",102)
(100,"time +=4",101)
(101,"door.spiedon[].[]",108)
(102,"time +=9",103)
(103,"controller.tau=>setkeyvalid.[]",130)
(104,"time +=3",105)
(105,"door.spiedon[].[]",109)
(106,"time +=15",107)
(107,"controller.checkkey[2].[]",153)
(108,"intruder.spyingdoor[false].[]",113)
(109,"intruder.spyingdoor[true].[]",120)
(110,"user.enterkey[].[]",121)
(110,"door.spiedon[].[]",117)
(111,"user.opendoor[].[]",115)
(111,"door.spiedon[].[]",116)
(112,"user.start[].[]",117)
(112,"user.start[].[]",116)
(112,"intruder.spyingdoor[false].[]",714)
(113,"time +=5",114)
(114,"controller.tau=>setkeyvalid.[]",129)
(115,"door.opendoor[].[]",118)
(115,"door.spiedon[].[]",119)
(116,"user.opendoor[].[]",119)
(116,"intruder.spyingdoor[false].[]",719)
(117,"user.enterkey[].[]",122)
(117,"intruder.spyingdoor[false].[]",715)
(118,"door.spiedon[].[]",123)
(119,"intruder.spyingdoor[false].[]",716)
(119,"door.opendoor[].[]",123)
(120,"door.breakdoor[].[]",124)
(121,"door.spiedon[].[]",122)
(122,"intruder.spyingdoor[false].[]",717)
(123,"intruder.spyingdoor[false].[]",718)
(124,"time +=2",125)
(125,"controller.setdoorstatus[true, false].[]",126)
(126,"controller.alarma[].[]",127)
(127,"time +=10",128)
(128,"controller.checkkey[2].[]",154)
(129,"controller.setkeyinvalid[].[]",131)
(130,"controller.setkeyinvalid[].[]",133)
(131,"time +=1",132)
(132,"controller.checkcode[3].[]",135)
(133,"time +=1",134)
(134,"controller.checkcode[3].[]",136)
(135,"controller.lockeduser[].[]",137)
(136,"controller.lockeduser[].[]",138)
(137,"controller.setarmed[].[]",139)
(138,"controller.setarmed[].[]",140)
(139,"door.lockdoor[].[]",141)
(140,"door.lockdoor[].[]",143)
(141,"time +=1",142)
(142,"user.codechecked[true].[]",145)
(143,"time +=1",144)
(144,"user.codechecked[true].[]",146)
(145,"door.getlockstatus[].[]",147)
(146,"door.getlockstatus[].[]",148)
(147,"user.setstatus[false].[]",149)
(148,"user.setstatus[false].[]",151)
(149,"time +=10",150)
(150,"user.enterkey[].[]",163)
(151,"time +=10",152)
(152,"user.enterkey[].[]",165)
(153,"controller.setkeyvalid[].[]",155)
(154,"controller.setkeyvalid[].[]",157)
(155,"time +=1",156)
(156,"user.keychecked[true].[]",159)
(157,"time +=1",158)
(158,"user.keychecked[true].[]",161)
(159,"time +=9",160)
(160,"controller.tau=>setkeyvalid.[]",170)
(161,"time +=9",162)
(162,"controller.tau=>setkeyvalid.[]",171)
(163,"time +=3",164)
(164,"door.spiedon[].[]",167)
(165,"time +=15",166)
(166,"controller.checkkey[2].[]",197)
(167,"intruder.spyingdoor[false].[]",168)
(168,"time +=12",169)
(169,"controller.checkkey[2].[]",196)
(170,"controller.setkeyinvalid[].[]",172)
(171,"controller.setkeyinvalid[].[]",174)
(172,"time +=1",173)
(173,"controller.checkcode[3].[]",176)
(174,"time +=1",175)
(175,"controller.checkcode[3].[]",177)
(176,"controller.lockeduser[].[]",178)
(177,"controller.lockeduser[].[]",179)
(178,"controller.setunarmed[].[]",180)
(179,"controller.setunarmed[].[]",181)
(180,"door.unlockdoor[].[]",182)
(181,"door.unlockdoor[].[]",184)
(182,"time +=1",183)
(183,"user.codechecked[true].[]",186)
(184,"time +=1",185)
(185,"user.codechecked[true].[]",187)
(186,"door.getlockstatus[].[]",188)
(187,"door.getlockstatus[].[]",189)
(188,"user.setstatus[false].[]",190)
(189,"user.setstatus[false].[]",192)
(190,"time +=1",191)
(191,"controller.setdoorstatus[false, false].[]",194)
(192,"time +=1",193)
(193,"controller.setdoorstatus[true, false].[]",195)
(194,"time +=9",720)
(195,"time +=9",721)
(196,"controller.setkeyvalid[].[]",198)
(197,"controller.setkeyvalid[].[]",200)
(198,"time +=1",199)
(199,"user.keychecked[true].[]",202)
(200,"time +=1",201)
(201,"user.keychecked[true].[]",204)
(202,"time +=7",203)
(203,"door.spiedon[].[]",206)
(204,"time +=9",205)
(205,"controller.tau=>setkeyvalid.[]",209)
(206,"intruder.spyingdoor[false].[]",207)
(207,"time +=2",208)
(208,"controller.tau=>setkeyvalid.[]",210)
(209,"controller.setkeyinvalid[].[]",211)
(210,"controller.setkeyinvalid[].[]",213)
(211,"time +=1",212)
(212,"controller.checkcode[3].[]",215)
(213,"time +=1",214)
(214,"controller.checkcode[3].[]",216)
(215,"controller.lockeduser[].[]",217)
(216,"controller.lockeduser[].[]",218)
(217,"controller.setunarmed[].[]",219)
(218,"controller.setunarmed[].[]",220)
(219,"door.unlockdoor[].[]",221)
(220,"door.unlockdoor[].[]",223)
(221,"time +=1",222)
(222,"user.codechecked[true].[]",225)
(223,"time +=1",224)
(224,"user.codechecked[true].[]",226)
(225,"door.getlockstatus[].[]",227)
(226,"door.getlockstatus[].[]",228)
(227,"user.setstatus[false].[]",229)
(228,"user.setstatus[false].[]",231)
(229,"time +=1",230)
(230,"controller.setdoorstatus[true, false].[]",233)
(231,"time +=1",232)
(232,"controller.setdoorstatus[true, false].[]",234)
(233,"time +=9",722)
(234,"time +=9",235)
(235,"user.enterkey[].[]",236)
(236,"time +=6",237)
(237,"door.spiedon[].[]",238)
(238,"intruder.spyingdoor[false].[]",239)
(239,"time +=9",240)
(240,"controller.checkkey[2].[]",241)
(241,"controller.setkeyvalid[].[]",242)
(242,"time +=1",243)
(243,"user.keychecked[true].[]",244)
(244,"time +=9",245)
(245,"controller.tau=>setkeyvalid.[]",246)
(246,"controller.setkeyinvalid[].[]",247)
(247,"time +=1",248)
(248,"controller.checkcode[3].[]",249)
(248,"door.spiedon[].[]",250)
(249,"controller.lockeduser[].[]",251)
(249,"door.spiedon[].[]",252)
(250,"controller.checkcode[3].[]",252)
(250,"intruder.spyingdoor[false].[]",253)
(251,"controller.setarmed[].[]",254)
(251,"door.spiedon[].[]",255)
(252,"controller.lockeduser[].[]",255)
(252,"intruder.spyingdoor[false].[]",256)
(253,"controller.checkcode[3].[]",256)
(254,"door.lockdoor[].[]",257)
(254,"door.spiedon[].[]",258)
(255,"controller.setarmed[].[]",258)
(255,"intruder.spyingdoor[false].[]",259)
(256,"controller.lockeduser[].[]",259)
(257,"door.spiedon[].[]",261)
(258,"intruder.spyingdoor[false].[]",260)
(258,"door.lockdoor[].[]",261)
(259,"controller.setarmed[].[]",260)
(260,"door.lockdoor[].[]",262)
(261,"intruder.spyingdoor[false].[]",262)
(262,"time +=1",263)
(263,"user.codechecked[true].[]",264)
(264,"door.getlockstatus[].[]",265)
(265,"user.setstatus[false].[]",266)
(266,"time +=10",267)
(267,"user.enterkey[].[]",268)
(268,"time +=9",269)
(269,"door.spiedon[].[]",270)
(270,"intruder.spyingdoor[false].[]",271)
(271,"time +=6",272)
(272,"controller.checkkey[2].[]",273)
(273,"controller.setkeyvalid[].[]",274)
(274,"time +=1",275)
(275,"user.keychecked[true].[]",276)
(276,"time +=9",277)
(277,"controller.tau=>setkeyvalid.[]",278)
(278,"controller.setkeyinvalid[].[]",279)
(279,"time +=1",280)
(280,"controller.checkcode[3].[]",281)
(281,"controller.lockeduser[].[]",282)
(282,"controller.setunarmed[].[]",283)
(283,"door.unlockdoor[].[]",284)
(284,"time +=1",285)
(285,"user.codechecked[true].[]",286)
(286,"door.getlockstatus[].[]",287)
(287,"user.setstatus[false].[]",288)
(288,"time +=1",289)
(289,"controller.setdoorstatus[true, false].[]",290)
(290,"time +=1",291)
(291,"door.spiedon[].[]",292)
(292,"intruder.spyingdoor[false].[]",293)
(293,"time +=8",294)
(294,"user.enterkey[].[]",295)
(295,"time +=12",296)
(296,"door.spiedon[].[]",297)
(297,"intruder.spyingdoor[false].[]",298)
(298,"time +=3",299)
(299,"controller.checkkey[2].[]",300)
(300,"controller.setkeyvalid[].[]",301)
(301,"time +=1",302)
(302,"user.keychecked[true].[]",303)
(303,"time +=9",304)
(304,"controller.tau=>setkeyvalid.[]",305)
(305,"controller.setkeyinvalid[].[]",306)
(306,"time +=1",307)
(307,"controller.checkcode[3].[]",308)
(308,"controller.lockeduser[].[]",309)
(309,"controller.setarmed[].[]",310)
(310,"door.lockdoor[].[]",311)
(311,"time +=1",312)
(312,"user.codechecked[true].[]",313)
(313,"door.getlockstatus[].[]",314)
(314,"user.setstatus[false].[]",315)
(315,"time +=5",316)
(316,"door.spiedon[].[]",317)
(317,"intruder.spyingdoor[false].[]",318)
(318,"time +=5",319)
(319,"user.enterkey[].[]",320)
(320,"time +=15",321)
(321,"controller.checkkey[2].[]",322)
(321,"door.spiedon[].[]",323)
(322,"controller.setkeyvalid[].[]",324)
(322,"door.spiedon[].[]",325)
(323,"controller.checkkey[2].[]",325)
(323,"intruder.spyingdoor[false].[]",326)
(324,"door.spiedon[].[]",327)
(325,"controller.setkeyvalid[].[]",327)
(325,"intruder.spyingdoor[false].[]",328)
(326,"controller.checkkey[2].[]",328)
(327,"intruder.spyingdoor[false].[]",329)
(328,"controller.setkeyvalid[].[]",329)
(329,"time +=1",330)
(330,"user.keychecked[true].[]",331)
(331,"time +=9",332)
(332,"controller.tau=>setkeyvalid.[]",333)
(333,"controller.setkeyinvalid[].[]",334)
(334,"time +=1",335)
(335,"controller.checkcode[3].[]",336)
(336,"controller.lockeduser[].[]",337)
(337,"controller.setunarmed[].[]",338)
(338,"door.unlockdoor[].[]",339)
(339,"time +=1",340)
(340,"user.codechecked[true].[]",341)
(341,"door.getlockstatus[].[]",342)
(342,"user.setstatus[false].[]",343)
(343,"time +=1",344)
(344,"controller.setdoorstatus[true, false].[]",345)
(345,"time +=7",346)
(346,"door.spiedon[].[]",347)
(347,"intruder.spyingdoor[false].[]",348)
(348,"time +=2",349)
(349,"user.enterkey[].[]",350)
(350,"time +=15",351)
(351,"controller.checkkey[2].[]",352)
(352,"controller.setkeyvalid[].[]",353)
(353,"time +=1",354)
(354,"user.keychecked[true].[]",355)
(355,"time +=2",356)
(356,"door.spiedon[].[]",357)
(357,"intruder.spyingdoor[false].[]",358)
(358,"time +=7",359)
(359,"controller.tau=>setkeyvalid.[]",360)
(360,"controller.setkeyinvalid[].[]",361)
(361,"time +=1",362)
(362,"controller.checkcode[3].[]",363)
(363,"controller.lockeduser[].[]",364)
(364,"controller.setarmed[].[]",365)
(365,"door.lockdoor[].[]",366)
(366,"time +=1",367)
(367,"user.codechecked[true].[]",368)
(368,"door.getlockstatus[].[]",369)
(369,"user.setstatus[false].[]",370)
(370,"time +=10",371)
(371,"user.enterkey[].[]",372)
(372,"time +=1",373)
(373,"door.spiedon[].[]",374)
(374,"intruder.spyingdoor[false].[]",375)
(375,"time +=14",376)
(376,"controller.checkkey[2].[]",377)
(377,"controller.setkeyvalid[].[]",378)
(378,"time +=1",379)
(379,"user.keychecked[true].[]",380)
(380,"time +=5",381)
(381,"door.spiedon[].[]",382)
(382,"intruder.spyingdoor[false].[]",383)
(383,"time +=4",384)
(384,"controller.tau=>setkeyvalid.[]",385)
(385,"controller.setkeyinvalid[].[]",386)
(386,"time +=1",387)
(387,"controller.checkcode[3].[]",388)
(388,"controller.lockeduser[].[]",389)
(389,"controller.setunarmed[].[]",390)
(390,"door.unlockdoor[].[]",391)
(391,"time +=1",392)
(392,"user.codechecked[true].[]",393)
(393,"door.getlockstatus[].[]",394)
(394,"user.setstatus[false].[]",395)
(395,"time +=1",396)
(396,"controller.setdoorstatus[true, false].[]",397)
(397,"time +=9",398)
(398,"user.enterkey[].[]",399)
(399,"time +=4",400)
(400,"door.spiedon[].[]",401)
(401,"intruder.spyingdoor[false].[]",402)
(402,"time +=11",403)
(403,"controller.checkkey[2].[]",404)
(404,"controller.setkeyvalid[].[]",405)
(405,"time +=1",406)
(406,"user.keychecked[true].[]",407)
(407,"time +=8",408)
(408,"door.spiedon[].[]",409)
(409,"intruder.spyingdoor[false].[]",410)
(410,"time +=1",411)
(411,"controller.tau=>setkeyvalid.[]",412)
(412,"controller.setkeyinvalid[].[]",413)
(413,"time +=1",414)
(414,"controller.checkcode[3].[]",415)
(415,"controller.lockeduser[].[]",416)
(416,"controller.setarmed[].[]",417)
(417,"door.lockdoor[].[]",418)
(418,"time +=1",419)
(419,"user.codechecked[true].[]",420)
(420,"door.getlockstatus[].[]",421)
(421,"user.setstatus[false].[]",422)
(422,"time +=10",423)
(423,"user.enterkey[].[]",424)
(424,"time +=7",425)
(425,"door.spiedon[].[]",426)
(426,"intruder.spyingdoor[false].[]",427)
(427,"time +=8",428)
(428,"controller.checkkey[2].[]",429)
(429,"controller.setkeyvalid[].[]",430)
(430,"time +=1",431)
(431,"user.keychecked[true].[]",432)
(432,"time +=9",433)
(433,"controller.tau=>setkeyvalid.[]",434)
(434,"controller.setkeyinvalid[].[]",435)
(435,"time +=1",436)
(436,"controller.checkcode[3].[]",437)
(437,"controller.lockeduser[].[]",438)
(438,"controller.setunarmed[].[]",439)
(439,"door.unlockdoor[].[]",440)
(440,"time +=1",441)
(441,"user.codechecked[true].[]",442)
(441,"door.spiedon[].[]",443)
(442,"door.getlockstatus[].[]",444)
(442,"door.spiedon[].[]",445)
(443,"user.codechecked[true].[]",445)
(443,"intruder.spyingdoor[false].[]",446)
(444,"user.setstatus[false].[]",447)
(444,"door.spiedon[].[]",448)
(445,"intruder.spyingdoor[false].[]",449)
(445,"door.getlockstatus[].[]",448)
(446,"user.codechecked[true].[]",449)
(447,"door.spiedon[].[]",450)
(448,"user.setstatus[false].[]",450)
(448,"intruder.spyingdoor[false].[]",451)
(449,"door.getlockstatus[].[]",451)
(450,"intruder.spyingdoor[false].[]",452)
(451,"user.setstatus[false].[]",452)
(452,"time +=1",453)
(453,"controller.setdoorstatus[true, false].[]",454)
(454,"time +=9",455)
(455,"user.enterkey[].[]",456)
(456,"time +=10",457)
(457,"door.spiedon[].[]",458)
(458,"intruder.spyingdoor[false].[]",459)
(459,"time +=5",460)
(460,"controller.checkkey[2].[]",461)
(461,"controller.setkeyvalid[].[]",462)
(462,"time +=1",463)
(463,"user.keychecked[true].[]",464)
(464,"time +=9",465)
(465,"controller.tau=>setkeyvalid.[]",466)
(466,"controller.setkeyinvalid[].[]",467)
(467,"time +=1",468)
(468,"controller.checkcode[3].[]",469)
(469,"controller.lockeduser[].[]",470)
(470,"controller.setarmed[].[]",471)
(471,"door.lockdoor[].[]",472)
(472,"time +=1",473)
(473,"user.codechecked[true].[]",474)
(474,"door.getlockstatus[].[]",475)
(475,"user.setstatus[false].[]",476)
(476,"time +=3",477)
(477,"door.spiedon[].[]",478)
(478,"intruder.spyingdoor[false].[]",479)
(479,"time +=7",480)
(480,"user.enterkey[].[]",481)
(481,"time +=13",482)
(482,"door.spiedon[].[]",483)
(483,"intruder.spyingdoor[false].[]",484)
(484,"time +=2",485)
(485,"controller.checkkey[2].[]",486)
(486,"controller.setkeyvalid[].[]",487)
(487,"time +=1",488)
(488,"user.keychecked[true].[]",489)
(489,"time +=9",490)
(490,"controller.tau=>setkeyvalid.[]",491)
(491,"controller.setkeyinvalid[].[]",492)
(492,"time +=1",493)
(493,"controller.checkcode[3].[]",494)
(494,"controller.lockeduser[].[]",495)
(495,"controller.setunarmed[].[]",496)
(496,"door.unlockdoor[].[]",497)
(497,"time +=1",498)
(498,"user.codechecked[true].[]",499)
(499,"door.getlockstatus[].[]",500)
(500,"user.setstatus[false].[]",501)
(501,"time +=1",502)
(502,"controller.setdoorstatus[true, false].[]",503)
(503,"time +=5",504)
(504,"door.spiedon[].[]",505)
(505,"intruder.spyingdoor[false].[]",506)
(506,"time +=4",507)
(507,"user.enterkey[].[]",508)
(508,"time +=15",509)
(509,"controller.checkkey[2].[]",510)
(510,"controller.setkeyvalid[].[]",511)
(511,"time +=1",512)
(512,"user.keychecked[true].[]",513)
(512,"door.spiedon[].[]",514)
(513,"door.spiedon[].[]",515)
(514,"user.keychecked[true].[]",515)
(514,"intruder.spyingdoor[false].[]",516)
(515,"intruder.spyingdoor[false].[]",517)
(516,"user.keychecked[true].[]",517)
(517,"time +=9",518)
(518,"controller.tau=>setkeyvalid.[]",519)
(519,"controller.setkeyinvalid[].[]",520)
(520,"time +=1",521)
(521,"controller.checkcode[3].[]",522)
(522,"controller.lockeduser[].[]",523)
(523,"controller.setarmed[].[]",524)
(524,"door.lockdoor[].[]",525)
(525,"time +=1",526)
(526,"user.codechecked[true].[]",527)
(527,"door.getlockstatus[].[]",528)
(528,"user.setstatus[false].[]",529)
(529,"time +=9",530)
(530,"door.spiedon[].[]",531)
(531,"intruder.spyingdoor[false].[]",532)
(532,"time +=1",533)
(533,"user.enterkey[].[]",534)
(534,"time +=15",535)
(535,"controller.checkkey[2].[]",536)
(536,"controller.setkeyvalid[].[]",537)
(537,"time +=1",538)
(538,"user.keychecked[true].[]",539)
(539,"time +=3",540)
(540,"door.spiedon[].[]",541)
(541,"intruder.spyingdoor[false].[]",542)
(542,"time +=6",543)
(543,"controller.tau=>setkeyvalid.[]",544)
(544,"controller.setkeyinvalid[].[]",545)
(545,"time +=1",546)
(546,"controller.checkcode[3].[]",547)
(547,"controller.lockeduser[].[]",548)
(548,"controller.setunarmed[].[]",549)
(549,"door.unlockdoor[].[]",550)
(550,"time +=1",551)
(551,"user.codechecked[true].[]",552)
(552,"door.getlockstatus[].[]",553)
(553,"user.setstatus[false].[]",554)
(554,"time +=1",555)
(555,"controller.setdoorstatus[true, false].[]",556)
(556,"time +=9",557)
(557,"user.enterkey[].[]",558)
(558,"time +=2",559)
(559,"door.spiedon[].[]",560)
(560,"intruder.spyingdoor[false].[]",561)
(561,"time +=13",562)
(562,"controller.checkkey[2].[]",563)
(563,"controller.setkeyvalid[].[]",564)
(564,"time +=1",565)
(565,"user.keychecked[true].[]",566)
(566,"time +=6",567)
(567,"door.spiedon[].[]",568)
(568,"intruder.spyingdoor[false].[]",569)
(569,"time +=3",570)
(570,"controller.tau=>setkeyvalid.[]",571)
(571,"controller.setkeyinvalid[].[]",572)
(572,"time +=1",573)
(573,"controller.checkcode[3].[]",574)
(574,"controller.lockeduser[].[]",575)
(575,"controller.setarmed[].[]",576)
(576,"door.lockdoor[].[]",577)
(577,"time +=1",578)
(578,"user.codechecked[true].[]",579)
(579,"door.getlockstatus[].[]",580)
(580,"user.setstatus[false].[]",581)
(581,"time +=10",582)
(582,"user.enterkey[].[]",583)
(583,"time +=5",584)
(584,"door.spiedon[].[]",585)
(585,"intruder.spyingdoor[false].[]",586)
(586,"time +=10",587)
(587,"controller.checkkey[2].[]",588)
(588,"controller.setkeyvalid[].[]",589)
(589,"time +=1",590)
(590,"user.keychecked[true].[]",591)
(591,"time +=9",592)
(592,"controller.tau=>setkeyvalid.[]",593)
(592,"door.spiedon[].[]",594)
(593,"controller.setkeyinvalid[].[]",595)
(593,"door.spiedon[].[]",596)
(594,"controller.tau=>setkeyvalid.[]",596)
(594,"intruder.spyingdoor[false].[]",597)
(595,"door.spiedon[].[]",598)
(596,"controller.setkeyinvalid[].[]",598)
(596,"intruder.spyingdoor[false].[]",599)
(597,"controller.tau=>setkeyvalid.[]",599)
(598,"intruder.spyingdoor[false].[]",600)
(599,"controller.setkeyinvalid[].[]",600)
(600,"time +=1",601)
(601,"controller.checkcode[3].[]",602)
(602,"controller.lockeduser[].[]",603)
(603,"controller.setunarmed[].[]",604)
(604,"door.unlockdoor[].[]",605)
(605,"time +=1",606)
(606,"user.codechecked[true].[]",607)
(607,"door.getlockstatus[].[]",608)
(608,"user.setstatus[false].[]",609)
(609,"time +=1",610)
(610,"controller.setdoorstatus[true, false].[]",611)
(611,"time +=9",612)
(612,"user.enterkey[].[]",613)
(613,"time +=8",614)
(614,"door.spiedon[].[]",615)
(615,"intruder.spyingdoor[false].[]",616)
(616,"time +=7",617)
(617,"controller.checkkey[2].[]",618)
(618,"controller.setkeyvalid[].[]",619)
(619,"time +=1",620)
(620,"user.keychecked[true].[]",621)
(621,"time +=9",622)
(622,"controller.tau=>setkeyvalid.[]",623)
(623,"controller.setkeyinvalid[].[]",624)
(624,"time +=1",625)
(625,"controller.checkcode[3].[]",626)
(626,"controller.lockeduser[].[]",627)
(627,"controller.setarmed[].[]",628)
(628,"door.lockdoor[].[]",629)
(629,"time +=1",630)
(630,"user.codechecked[true].[]",631)
(631,"door.getlockstatus[].[]",632)
(632,"user.setstatus[false].[]",633)
(633,"time +=1",634)
(634,"door.spiedon[].[]",635)
(635,"intruder.spyingdoor[false].[]",636)
(636,"time +=9",637)
(637,"user.enterkey[].[]",638)
(638,"time +=11",639)
(639,"door.spiedon[].[]",640)
(640,"intruder.spyingdoor[false].[]",641)
(641,"time +=4",642)
(642,"controller.checkkey[2].[]",643)
(643,"controller.setkeyvalid[].[]",644)
(644,"time +=1",645)
(645,"user.keychecked[true].[]",646)
(646,"time +=9",647)
(647,"controller.tau=>setkeyvalid.[]",648)
(648,"controller.setkeyinvalid[].[]",649)
(649,"time +=1",650)
(650,"controller.checkcode[3].[]",651)
(651,"controller.lockeduser[].[]",652)
(652,"controller.setunarmed[].[]",653)
(653,"door.unlockdoor[].[]",654)
(654,"time +=1",655)
(655,"user.codechecked[true].[]",656)
(656,"door.getlockstatus[].[]",657)
(657,"user.setstatus[false].[]",658)
(658,"time +=1",659)
(659,"controller.setdoorstatus[true, false].[]",660)
(660,"time +=3",661)
(661,"door.spiedon[].[]",662)
(662,"intruder.spyingdoor[false].[]",663)
(663,"time +=6",664)
(664,"user.enterkey[].[]",665)
(665,"time +=14",666)
(666,"door.spiedon[].[]",667)
(667,"intruder.spyingdoor[false].[]",668)
(668,"time +=1",669)
(669,"controller.checkkey[2].[]",670)
(670,"controller.setkeyvalid[].[]",671)
(671,"time +=1",672)
(672,"user.keychecked[true].[]",673)
(673,"time +=9",674)
(674,"controller.tau=>setkeyvalid.[]",675)
(675,"controller.setkeyinvalid[].[]",676)
(676,"time +=1",677)
(677,"controller.checkcode[3].[]",678)
(678,"controller.lockeduser[].[]",679)
(679,"controller.setarmed[].[]",680)
(680,"door.lockdoor[].[]",681)
(681,"time +=1",682)
(682,"user.codechecked[true].[]",683)
(683,"door.getlockstatus[].[]",684)
(684,"user.setstatus[false].[]",685)
(685,"time +=7",686)
(686,"door.spiedon[].[]",687)
(687,"intruder.spyingdoor[false].[]",688)
(688,"time +=3",689)
(689,"user.enterkey[].[]",690)
(690,"time +=15",691)
(691,"controller.checkkey[2].[]",692)
(692,"controller.setkeyvalid[].[]",693)
(693,"time +=1",694)
(694,"user.keychecked[true].[]",695)
(695,"time +=1",696)
(696,"door.spiedon[].[]",697)
(697,"intruder.spyingdoor[false].[]",698)
(698,"time +=8",699)
(699,"controller.tau=>setkeyvalid.[]",700)
(700,"controller.setkeyinvalid[].[]",701)
(701,"time +=1",702)
(702,"controller.checkcode[3].[]",703)
(703,"controller.lockeduser[].[]",704)
(704,"controller.setunarmed[].[]",705)
(705,"door.unlockdoor[].[]",706)
(706,"time +=1",707)
(707,"user.codechecked[true].[]",708)
(708,"door.getlockstatus[].[]",709)
(709,"user.setstatus[false].[]",710)
(710,"time +=1",711)
(711,"controller.setdoorstatus[true, false].[]",712)
(712,"time +=9",723)
(713,"@[20>>20]",25)
(714,"@[40>>20]",44)
(715,"@[40>>20]",47)
(716,"@[40>>20]",54)
(717,"@[40>>20]",52)
(718,"@[40>>20]",59)
(719,"@[40>>20]",48)
(720,"@[65>>74]",9)
(721,"@[65>>54]",46)
(722,"@[85>>74]",45)
(723,"@[751>>720]",110)
